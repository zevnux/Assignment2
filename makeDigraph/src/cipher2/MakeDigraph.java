package cipher2;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class MakeDigraph {
	
	public String text = "YESCOMMAMYLOADCOMXMAWHISPEREUBELXHTRIXCOMXMARQDHEREYESSWAMWIQPTEARSOFNRATITQDEHMHZIDOTATQPEFUASTCHRQCEYOQSHALXLHANEITCOMMASAVDNOLDEMORTDOTRQDVIYOQRFAMPZYCOMMASOTNQPEWORLDWESHHXLCQTAWRYQPECRQKERTHATIFHECTSQSQVTILOVLYTHOSEOFQPETAVEBLOODREMATNNOLDEMORTRHZSEDLQCFBSMHXFOYSWAIDCOMXMAPOTNTEDVTDUAECTLYRKLQPESLOWLYAENOLNIVGFXMBRESQSPEVDEDONERTHETABLECOMMARQDGANEITATIIYFMICWDOTQPEFPXVAECAMETOLXFEWITHAGROAQRIDBEMHVTOSTRBMGLEAMHTNSTTNNISIBLEBOVDSDOTDOYOQRECOGVIZEOVAMBESTCOMMASENEAVSASKEDNOLDEMORTDOTSVTPERHZSEDHISEYESTOQPEQPSVDEDOWFHACEDOTHXLOQFHEDEATHEATERSWERELOXOKTNMBPTKLQPECTPTINEVOWCOMMAASQPOQGHQPEYHAUBEXEVXPNEVPERMISXSIOVTOSHOWCQAUOSITYUOTASSHERENOLNEDTOFACETHEFXREZPGHTCOMMAQPEWOMRQSAVDTNACRACKEDRQDTERAUFXEDNOICECOMMASENEAVSHELIPEAHCOMMAYESCOMMASAVDSVTPEASTHEPRISOVERTQRVEDSLOWLYAWRYHMHZIDOTRQUYOQCOMXMADAACOASKEDNOLDEMORTCOMMASTROTZVGQPESQRKESXSVOQTWITALHISWRQDZREEHRQDXDOTDRACOSHOXOKHISHEADVERTZLYDOTVOWQPATQPEWOMRQHADKOKEVCOMXMAHESEEMEDQVRBLETOLOOKATHERAIYMOREDOKPQTYOQAOQLDVOQPANETZQEVHERCXHSXSESCOMMASAVDNOLDEMORTDOTFORTHOSEOFYOQAHODOVOTKVOWCOMMAWEAREIOIVEDHERETOVPXPQBYCHARITYBVABRGEWHOCOMMAQVTILRECEVTLYCOMMATABMPQATHOGWARTSSCHOOLOFWITCHCRAQFRQDKIZARDAYUOTQPEREWERESMALXLVOISESOFCOMPREHEVSIOVAROQIDQPETRBLEDOTABAOADCOMMAHQVCHEDKOMRQWIQPPOTNTEDTEXETHCACTXEDDOTYESPROFESSOABVABRGETABMPQQPECHILDREVOFWITCHESRQDKIZARDSHXXHBOQTMQGXGLESHOWTHEYRREVOTSODXFFEREVTFROMQSOVEOQFHEDEATHEATERSXSPATOVQPEFLOORDOTCHAAUTYBQABHMERENOLNEDTOFACESQRPEHMHZIDOTSENEAVSPLEASEPLEASESPZEVCECOMXMASAVDNOLDEMORTCOMMAWIQPRQOTHERTWITCHOFLHXFOYSWAIDCOMXMARQDCHAAUTYFELXLSPZEVTASIFNHMGEDXDOTVOTCOVTEVTWITHCORAVPATNMHIDPOLXXBTIVGQPEMTNDSOFWIZAADTNGCHILDREVCOMMAXHSTWEEKPROFESSOABVABRGEUFOTEANTPIASSIOVEDDEFEVSEOFLQUBLOXODSIVTHEDRPZYPROPHETDOTWIZARDSCOMXMASHESRYSCOMMAMQSTACCEPAQPESETHIENESOFQPEIRKVOWLEDGERQDMHMICDOKLQPEDWIIDZPVGOFQPEPVAEBLOODSISCOMMASAYSPROFESSOABVABRGECOMXMAAMOSTDESUARBLECIRCQMSTRQCESHEWOQLDHANEQSHXLMATEWITAGBMGLESORCOMXMAVODOQBTCOMMAWEREWOLNESVOBOUYXHBMHEDTHISTIMEDOTQPEREWASVOMISTZQTNGTHERQGERAIDCOVTEMPATNNOLDEMORTSNOICEDOTFORTHEQPUADTIMECOMMACHARITYBVABRGERENOLNEDTOBZCESVTPEDOTTEARSWEREPOQAUVGFROMHEREYESIVTOHERHAUADOTSQRPELOOKEDBRCKATHERCOMMADQITEIPIASSINECOMXMAASSHETVAVEDSLOWLYRWAYZROGAIMHMHZIDOTANRDZQEDANRADOKLQPEFXHSHOFGREXEVZPGHTILXXBMIQRTEDENEAYCORVEROFQPEROXOMDOTCHAAUTYFELXLCOMMAWIQPARESOQIDTNGCRASHCOMXMAOVTOQPETRBLEBELOWCOMMAWHICPQREGQLEDRIDCREAKEDXDOTSENERHXOFQPEDEAQPEATERSLETPKPACTZVTHEUACHHZRSDOTDRACOFELXLOQTOFHISOVTOTHEFMOXORDOTDTNVERCOMMAQRXPNTCOMXMASAVDNOLDEMORTSOFTLYCOMMARQDTHEGREATSQRKESWRYEDRQDSZPQPEREDFROMHISXSHOQLDERSOVTOTHEPOZPSHEDWOODDOKLTWODOTTNMEMOAUAMHARXAYWASBLEEDTNGDOTCLQTCHTNGHISAUGHQPRQDVVHISLEQFRQDSWEARTNMBIDERHISBREATHCOMMAHESHOQLDEREDOPEVHISBEDROOMDOOR";
	public String output = "";
	public PrintWriter writer;
	
	public void execute(){
		try {
			writer = new PrintWriter("digraph.txt","UTF-8");
		} catch (FileNotFoundException e) {
			return;
		} catch (UnsupportedEncodingException e) {
			return;
		}
		
		analyzeDigraphs(text);
		
		writer.close();
	}

	private void analyzeDigraphs(String text) {
 		for (int i = 0; i < text.length(); i += 2){
			char first = text.charAt(i);
			char second = text.charAt(i+1);
			output = output + first + second + " ";
		}
 		
 		writer.println(output);
	}
	
	private void analyzeSixgraphs(String text) {
		HashMap<String, Integer> digraphCount = new HashMap<String, Integer>();
		for (int i = 0; i < text.length(); i += 2){
			String digraph = "";
			try{
				char first = text.charAt(i);
				char second = text.charAt(i+1);
				char third = text.charAt(i+2);
				char fourth = text.charAt(i+3);
				char fifth = text.charAt(i+4);
				char sixth = text.charAt(i+5);
				char seventh = text.charAt(i+6);
				char eigth = text.charAt(i+7);
				digraph = "" + first + second + third + fourth + fifth + sixth + seventh + eigth;
				if (digraphCount.containsKey(digraph)){
					digraphCount.put(digraph, digraphCount.get(digraph) + 1);
				} else {
					digraphCount.put(digraph, 1);
				}
			} catch (Exception e ){
				break;
			}
		}
		for (String key : digraphCount.keySet()){			
			writer.println(key + "," + digraphCount.get(key));
		}
	}

	private boolean checkPlayfair (String text){
		// First determine if the cipher is a playfair by checking the digraphs
		for (int i = 0; i < text.length(); i += 2){
			char first = text.charAt(i);
			char second = text.charAt(i+1);
			if (first == second){
				System.out.println("Found a duplicated digraph: " + first + second + " at index " + i);
				return false;
			}
		}
		
		return true;
	}
	
}
